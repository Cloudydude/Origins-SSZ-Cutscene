// Set eggman/eggrobo to burned state
//# address-hook(0x07cbce) end(0x07cc10)
function void fn07cbce()
{
	base.fn07cbce()
	if (objA0.update_address == 0x08565e)
	{
		A1 = 0xffffb378
		objA1.base_state = 0x04
	}
}

// Load burned sprite
//# address-hook(0x067cba) end(0x067ccc)
function void fn067cba()
{
	if (global.zone_act == 0x0a01)
		objA0.animation.sprite = 3
	else
		base.fn067cba()
}

//# address-hook(0x07cc26) end(0x07cc34)
function void fn07cc26()
{
	if (isMainCharacter(CHARACTER_KNUCKLES))
	{
		// Eggrobo pops an animal and adds points to your score
		addScore(10) // add 100 points
		if (allocDynamicObjectStd())
		{
			// Spawn floating points display
			objA1.update_address = 0x02cce0
			objA1.position.x.u16 = objA0.position.x.u16
			objA1.position.y.u16 = objA0.position.y.u16
			objA1.animation.sprite = 0x00
		}
		objA1.update_address = 0x01e5e0 // Spawn the small explosion 
	}
	else
	{
		// Eggman falls out of his egg mobile
		if (allocDynamicObjectStd())
		{
			u8[A1 + 0x04] = (render_flag.WORLD)
			objA1.update_address = 0x200070
			objA1.position.x.u16 = objA0.position.x.u16
			objA1.position.y.u16 = objA0.position.y.u16
			objA1.state = 0
			objA1.sprite_attributes = objA0.sprite_attributes
			objA1.velocity.x = 0xD0
			objA1.velocity.y = -0x330
			// Audio.playAudio("Robotnik_AOSTH", AudioContext.CONTEXT_SOUND)
			// objA1.velocity.y = -0x310
			// objA1.velocity.y = -0x2F8
			// objA1.position.y.u16 += 0xf
			// objA1.state = 0
			// objA1.animation.sprite = 0x00
		}
	}
	base.fn07cc26()
}

//# address-hook(0x200070)
function void Thing()
{
	// if (!(objA0.render_flags & render_flag.VISIBLE))
	// {
	// 	UnloadObject()
	// }

	// CheckGroundCollision()
	// System.writeDisplayLine(stringformat("objA0.velocity.y = %x", objA0.velocity.y))
	if (objA0.velocity.y >= 0xb28)
	{
		UnloadObject() // despawn falling eggman
		return
	}

	// if (objA0.render_flags & render_flag.VISIBLE)
	// 	System.writeDisplayLine("I'm High")
	// else
	// 	System.writeDisplayLine("I'm Low")
	// objA0.hitbox_extends.y = 12
	objA0.box_size.y = 40
	objA0.position.x += objA0.velocity.x
	UpdateMovementSimple()
	DrawObject() // spawn falling eggman
}

// Sonic and Tails escaping

// escaping the claw
//# address-hook(0x07cc3a) end(0x07cc62)
function void fn07cc3a()
{
	base.fn07cc3a()

	if (u8[0xffffe654] != 0)
	{
		XtraEscape()
		return
	}

	if (isMainCharacter(CHARACTER_KNUCKLES))
		return

	SonicTailsEscaping()
}

function void XtraEscape()
{
	if (!isMainCharacter(CHARACTER_KNUCKLES))
		SonicTailsEscaping()
}

function void SonicTailsEscaping()
{
	A1 = 0xffffb000
	// objA0.position.x.u16 = objA1.position.x.u16
	// objA0.position.y.u16 = objA1.position.y.u16
	// objA0.velocity.x = 0x0400
	objA0.velocity.y = (isMainCharacter(CHARACTER_SONIC)) ? 0x320 : 0x1e0 // (isMainCharacter(CHARACTER_TAILS))
	
	if (isMainCharacter(CHARACTER_SONIC))
	{
		Audio.playAudio("dropdash_charge", AudioContext.CONTEXT_SOUND)
		u8[A1 + 0x20] = char.state.SONIC_DROPDASH
	}
	else //(isMainCharacter(CHARACTER_TAILS))
	{
		playSound(0xba)
		objA1.animation.sprite = 0xa0
		u8[A1 + 0x20] = char.state.TAILS_FLYDOWN
	}
}

// global u8 Egg.laugh

// //# address-hook(0x07caaa) end(0x07cacc)
// function void fn07caaa()
// {
// 	base.fn07caaa()
// 	if (objA0.position.x.u16 < getScreenWidth() - 0x20)
// 	{
// 		Egg.laugh = 180
// 	}
// }

function bool skipPart()
{
	A1 = 0xffffb000

	bool skip = false
	D0.u16 = objA0.position.x.u16
	if (D0.u16 > 0x08)
	{
		D1.u16 = objA1.position.x.u16
		if (D1.u16 < D0.u16 - 0x0c)
		{
			skip = true
		}
		else if (D1.u16 >= D0.u16 + 0x0c)
		{
			skip = true
		}
	}
	return skip
}

function void XtraInClaw()
{
	if (!isMainCharacter(CHARACTER_KNUCKLES))
		SonicTailsInClaw()
}

function void SonicTailsInClaw()
{
	u8[A1 + 0x20] = char.state.LIFTED
	objA1.animation.sprite = (isMainCharacter(CHARACTER_TAILS)) ? 0xb6 : 0xc9
}

// In the claw
//# address-hook(0x07cd82) end(0x07ce18)
function void fn07cd82()
{
	base.fn07cd82()

	if (!skipPart())
	{
		A1 = 0xffffb000
		global.level_started = 0 // turn off hud



		if (u8[0xffffe654] != 0)
		{
			XtraInClaw()
			return
			// return
			// somefunction()
			// leave some example code in a function
			// to demonstrate how to make your own version
		}


		if (isMainCharacter(CHARACTER_KNUCKLES))
			return

		SonicTailsInClaw()

		// A1 = 0xffffb000
		// global.level_started = 0 // turn off hud

		

		// objA0.update_address = 0x07ce1e
		// u8[0xfffffab8] |= 0x04
		// objA0.animation.sprite = 2
	}
}

// Character position in claw
//# address-hook(0x07ce42) end(0x07ce66)
function void fn07ce42()
{
	base.fn07ce42()

	if (u8[0xffffe654] != 0)
	{
		XtraClawcords()
		return
		// return
		// somefunction()
		// leave some example code in a function
		// to demonstrate how to make your own version
	}

	if (isMainCharacter(CHARACTER_KNUCKLES))
		return

	SonicTailsClaw()
}

function void SonicTailsClaw()
{
    if ((u8[0xfffffab8] & 0x20) == 0)
    {
        u8 adjust = (isMainCharacter(CHARACTER_TAILS)) ? 1 : 3
        A1 = 0xffffb000
        objA1.position.x.u16 -= adjust
        objA1.position.y.u16 -= 6
    }
}

function void XtraClawcords()
{
    if (!isMainCharacter(CHARACTER_KNUCKLES))
    {
        SonicTailsClaw()
    }
}

// // Character position in claw
// //# address-hook(0x07ce42) end(0x07ce66)
// function void fn07ce42()
// {
//     base.fn07ce42()

//     if (isMainCharacter(CHARACTER_KNUCKLES))
//     {
// 		return
//     }

//     if (u8[0xffffe654] != 0)
//     {
//         XtraClawcords()
//         return
//     }
//     SonicTailsClaw()
// }

// //# address-hook(0x07cc68) end(0x07ccaa)
// function void fn07cc68()
// {
// 	base.fn07cc68()

// 	if (isMainCharacter(CHARACTER_KNUCKLES))
// 	{
// 		if (D0.u16 < level.bossarea.right)
// 			return
// 		global.level_started = -0x6f // let hud fly in
// 		return	
// 	}

// 	A1 = 0xffffb000
	
// 	// UpdateMovementStraightSimple()
// 	// A1 = 0xffffb000
// 	// objA1.position.x.u16 = objA0.position.x.u16
// 	// objA1.position.y.u16 = objA0.position.y.u16
// 	// D0.u16 = objA0.position.x.u16

// 	if (isMainCharacter(CHARACTER_SONIC))
// 	{
// 		CheckGroundCollision()
// 		// System.writeDisplayLine(stringformat("D1.u16 = %d", D1.u16))
// 		if (D1.u16 <= 14)
// 		{
// 			// A1 = 0xffffb000
// 			// releaseDropDash()


// 			if (u8[0xffffb000 + 0x20] != char.state.ROLLING)
// 			{
// 				Audio.playAudio("dropdash_release", AudioContext.CONTEXT_SOUND)
// 				// dust
// 				u8[A6 + 0x20] = 0x02
// 				u16[A6 + 0x10] = u16[0xffffb000 + 0x10]
// 				u16[A6 + 0x14] = (0x4AC)
// 				u8[A6 + 0x23] = 0x01
// 				u8[A6 + 0x2a] = char.flags & char.flag.FACING_LEFT
// 			}

// 			objA0.velocity.x = 0x0800
// 			objA0.velocity.y = 0
// 			// System.writeDisplayLine(stringformat("u16[0xffffb000 + 0x14] = %x", u16[0xffffb000 + 0x14] ))
// 			u16[0xffffb000 + 0x14] = 0x4b1
// 			// u16[0xffffb000 + 0x14] -= 2

// 			u8[0xffffb000 + 0x20] = char.state.ROLLING
// 			u8[0xffffb000 + 0x2a] |= char.flag.ROLLING

// 			//hardcode rolling animation
// 			u8[0xffffb000 + 0x22] = ((global.framecounter >> 0) % (8) + 0x96)
// 			if (u8[0xffffb000 + 0x22] == 0x98 || u8[0xffffb000 + 0x22] == 0x9a || u8[0xffffb000 + 0x22] == 0x9c || u8[0xffffb000 + 0x22] == 0x9e)
// 			{
// 				u8[0xffffb000 + 0x22] = 0x96
// 			}
// 			else if (u8[0xffffb000 + 0x22] == 0x99)
// 			{
// 				u8[0xffffb000 + 0x22] = 0x98
// 			}
// 			else if (u8[0xffffb000 + 0x22] == 0x9b)
// 			{
// 				u8[0xffffb000 + 0x22] = 0x99
// 			}
// 			else if (u8[0xffffb000 + 0x22] == 0x9d)
// 			{
// 				u8[0xffffb000 + 0x22] = 0x9a
// 			}
// 			// objA1.animation.sprite = 0x90
// 			//System.writeDisplayLine(stringformat("u8[0xffffb000 + 0x20] = %x", u8[0xffffb000 + 0x20]))
// 			// return
// 		}
// 	}
// 	else if (isMainCharacter(CHARACTER_TAILS))
// 	{
// 		CheckGroundCollision()
// 		// System.writeDisplayLine(stringformat("D1.u16 = %d", D1.u16))
// 		if (D1.u16 <= 9)
// 		{
// 			// System.writeDisplayLine(stringformat("u16[0xffffb000 + 0x14] = %x", u16[0xffffb000 + 0x14] ))
// 			u16[0xffffb000 + 0x14] = 0x4b0
// 			objA0.velocity.x = 0x0300
// 			objA0.velocity.y = 0
// 			u8[0xffffb000 + 0x20] = char.state.RUNNING
// 			u8[0xffffb000 + 0x22] = ((global.framecounter >> 2) % (8) + 0x01)
// 		}
// 		//else if (objA0.state == char.state.RUNNING)
// 		//u8[0xffffb000 + 0x22] = ((global.framecounter >> 3) % (8) + 0x01)

// 	}
// 	// if (D0.u16 < 468)
// 	// 	return
// 	if (D0.u16 < level.bossarea.right)
// 		return

// 	global.level_started = -0x6f // let hud fly in
// 	// objA0.update_address = 0x07ccb0
// 	// objA0.countdown_value = 0x06
// 	// objA0.velocity.x = 0
// 	// objA0.velocity.y = 0
// 	objA0.hitbox_extends.y = (isMainCharacter(CHARACTER_TAILS)) ? 0x10 : 0x0e
// 	// if (isMainCharacter(CHARACTER_KNUCKLES))
// 	// 	objA1.animation.sprite = 0xca
// 	// UpdatePlayer1SpritePatterns()
// }

function bool XtraOnGround()
{
	if (isMainCharacter(CHARACTER_KNUCKLES))
		return false
	SonicTailsGround()
	return true
}

function void SonicTailsGround()
{
	UpdateMovementStraightSimple()
	A1 = 0xffffb000
	objA1.position.x.u16 = objA0.position.x.u16
	objA1.position.y.u16 = objA0.position.y.u16
	D0.u16 = objA0.position.x.u16

	if (isMainCharacter(CHARACTER_SONIC))
	{
		// System.writeDisplayLine(stringformat("u16[A1 + 0x14] = %x", u16[A1 + 0x14] ))
		CheckGroundCollision()
		// if (u16[A1 + 0x14] >= 0x4b3)
		// System.writeDisplayLine(stringformat("D0.u16 = %d", D0.u16))
		if (D1.u16 <= 14)
		{

			u8[0xffffb000 + 0x2e] = 0
			StopObjectA1()


			if (u8[0xffffb000 + 0x20] != char.state.ROLLING)
			{
				Audio.playAudio("dropdash_release", AudioContext.CONTEXT_SOUND)
				// dust
				u8[A6 + 0x20] = 0x02
				u16[A6 + 0x10] = u16[0xffffb000 + 0x10]
				u16[A6 + 0x14] = (0x4AC)
				u8[A6 + 0x23] = 0x01
				u8[A6 + 0x2a] = char.flags & char.flag.FACING_LEFT
				u8[0xffffb000 + 0x22] = 0x96
			}
			// char.groundspeed
			s16[0xffffb000 + 0x1c] = objA0.velocity.x = 0x0800
			// objA0.velocity.x = 0x0800
			// s16[0xffffb000 + 0x1c] = objA0.velocity.x
			objA0.velocity.y = 0
			// System.writeDisplayLine(stringformat("u16[0xffffb000 + 0x14] = %x", u16[0xffffb000 + 0x14] ))
			u16[0xffffb000 + 0x14] = 0x4b1
			player1.control_override = 0xff // Disable P1's controls
			// u16[0xffffb000 + 0x14] -= 2
			// objA0.hitbox_extends.y = 0x0f

			u8[0xffffb000 + 0x20] = char.state.ROLLING
			u8[0xffffb000 + 0x2a] |= char.flag.ROLLING
		}
	}
	else // (isMainCharacter(CHARACTER_TAILS))
	{
		CheckGroundCollision()
		// System.writeDisplayLine(stringformat("D1.u16 = %d", D1.u16))
		if (D1.u16 <= 9)
		{
			u8[0xffffb000 + 0x2e] = 0
			StopObjectA1()
			// UnloadObject()
			
			// System.writeDisplayLine(stringformat("u16[0xffffb000 + 0x14] = %x", u16[0xffffb000 + 0x14] ))
			u16[0xffffb000 + 0x14] = 0x4b0
			s16[0xffffb000 + 0x1c] = objA0.velocity.x
			// objA0.velocity.x = 0x0300
			objA0.velocity.y = 0
			// objA0.hitbox_extends.y = (isMainCharacter(CHARACTER_KNUCKLES)) ? 0x13 : (isMainCharacter(CHARACTER_TAILS)) ? 0x10 : 0x0e
			player1.control_override = 0xff // Disable P1's controls
			control.player1 = 0x0808
		}
	}
	if (D0.u16 < level.bossarea.right)
		return
	
	player1.control_override = 0

	if (isMainCharacter(CHARACTER_TAILS))
		s16[0xffffb000 + 0x1c] = 0

	objA0.update_address = 0x07ccb0
	objA0.countdown_value = 0x06
	objA0.velocity.x = 0
	objA0.velocity.y = 0
	objA0.hitbox_extends.y = (isMainCharacter(CHARACTER_TAILS)) ? 0x10 : 0x0e
}

// On the ground
//# address-hook(0x07cc68) end(0x07ccaa)
function void fn07cc68()
{
	if (u8[0xffffe654] != 0)
	{
		if (XtraOnGround())
		{
			Hudflysin()
			return
		}
		// return
		// somefunction()
		// leave some example code in a function
		// to demonstrate how to make your own version
	}

	if (isMainCharacter(CHARACTER_KNUCKLES))
		base.fn07cc68()
	else
		SonicTailsGround()

	Hudflysin()
	

	// if (isMainCharacter(CHARACTER_KNUCKLES))
	// 	base.fn07cc68()
	// else
	// 	SonicTailsGround()

	// if (D0.u16 < level.bossarea.right)
	// 	return
	// global.level_started = -0x6f // let hud fly in
}

function void Hudflysin()
{
	if (D0.u16 < level.bossarea.right)
		return
	global.level_started = -0x6f // let hud fly in
}



global bool Egg.Glasses

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
	// if (objA0.update_address == 0x067cd2 && global.zone_act == 0x0a01 && Egg.laugh > 0)
	// {
	// 	bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
	// 	if(objA0.animation.sprite < 0x02)
	// 	{
	// 		--Egg.laugh
	// 		u64 key = stringformat(((objA0.mapping_offset == 0x0681d4) ? "robo-laugh-%02x" : "eggman-laugh-blue-%02x"), (EggmanBlue.getMetronome() + (EggmanBlue.laughStyle * 0x02)))
	// 		Renderer.drawCustomSprite(key, px, py, 0x00, (objA0.render_flags & 0x01) | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue)
	// 		return true
	// 	}
	// }

	if (objA0.update_address == 0x200070)
	{
		// if modded sprites not detected, use the default sprites
		u8 animationSpriteEx = ((global.framecounter >> 2) & 0x03)
		u64 key = stringformat("eggman-modded-0%d", animationSpriteEx)
		if (!Renderer.hasCustomSprite(key))
		{
			u64 eggs = (Egg.Glasses) ? "blue_glasses" : "black"
			key = stringformat("eggman-%s-0%d", eggs, animationSpriteEx)
		}

		Renderer.drawCustomSprite(key, px, py, 0, SPRITE_FLAG_PRIO, renderQueue)
		return true
	}
	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
}



// landing on the ground
// //# address-hook(0x07ccb0) end(0x07ccf8)
// function void fn07ccb0()
// {
// 	--objA0.countdown_value
// 	if (objA0.countdown_value == 0)
// 	{
// 		A1 = 0xffffb000
// 		objA1.animation.sprite = 0xcb
// 		UpdatePlayer1SpritePatterns()
// 	}

// 	UpdateMovementSimple()
// 	A1 = 0xffffb000
// 	objA1.position.x.u16 = objA0.position.x.u16
// 	objA1.position.y.u16 = objA0.position.y.u16
// 	CheckGroundCollision()
// 	if (D1.s16 >= 0)
// 		return

// 	A1 = 0xffffb000
// 	objA1.position.y.u16 += D1.u16
// 	u8[A1 + 0x2e] = 0
// 	StopObjectA1()
// 	UnloadObject()
// 	// base.fn07ccb0()
// 	// if (objA0.countdown_value == 0)
// 	// {
// 	// 	A1 = 0xffffb000
// 	// 	objA1.animation.sprite = 0xb6
// 	// 	UpdatePlayer1SpritePatterns()
// 	// }
// }


// function void RenderHUD()
// {
// 	return
// }

// //# address-hook(0x07cbce) end(0x07cc10)
// function void fn07cbce()
// {
// 	fn0847e6()
// 	UpdateMovementStraightSimple()

// 	A1 = 0xffff0000 + u16[0xfffffaa4]
// 	A2 = 0x07cc1e
// 	fn0858c8()
// 	if (!_equal())
// 	{
// 		objA0.update_address = 0x08565e
// 		objA0.sprite_priority = 0x80
// 		objA0.countdown_value = 0x3f
// 		objA0.countdown_callback = 0x07cc26

// 		// "spawnSimpleChildObjects(0x083fee)" replaced by:
// 		// spawnSimpleChildObjects(0x083d84, 1)
// 	}

// 	DrawObject()
// }


// function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
// {
// 	bool prioFlag = (objA0.sprite_attributes & sprite_attribute.PRIORITY) != 0
// 	// Cutscene Knuckles (only before MHZ 2, from there on he gets handled differently)
// 	if (objA0.update_address == 0x061d92)
// 	{
// 		if (objA0.base_state == 0x08)
// 		{
// 			u8 animation = ((global.framecounter >> 2) % 5)
// 			u64 key = stringformat("cutscene_beavis_%d", animation)
			
// 			Renderer.drawCustomSprite(key, px, py, 0x80, objA0.render_flags | (prioFlag ? SPRITE_FLAG_PRIO : 0), renderQueue)
// 			return true
// 		}
// 		// else
// 		// 	huh = 0
// 	}
// 	return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)
// }

// //# address-hook(0x005048) end(0x00552c)
// function void TitleScreen_SK()
// {
// 	Kosinski.decompress(0x0cca20, 0xffff0000)
// 	Kosinski.decompress(0x0cc6a0, A1)
// 	Kosinski.decompress(0x0d2504, A1)
// 	updateSpritePattern(0xffff0000, TitleScreenSK.Background.targetInVRAM, 0x0e20)
// 	updateSpritePattern(0xffff1c40, TitleScreenSK.SEGALogo.targetInVRAM, 0x1640)		// Also updates sprite patterns for Sonic jumping down

// 	Kosinski.decompress(0x0d33e4, 0xffff4e00)
// 	updateSpritePattern(0xffff4e00, TitleScreenSK.DeathEgg.targetInVRAM, 0x0720)

// 	Kosinski.decompress(0x0d3a64, 0xffff5d00)
// 	updateSpritePattern(0xffff5d00, TitleScreenSK.Mountain.targetInVRAM, 0x0150)

// 	Enigma.decompress(0x0cba68, 0xffff7400, (sprite_attribute.PRIORITY | (TitleScreenSK.SEGALogo.targetInVRAM >> 5)))
// 	if ((global.region_code & 0x80) == 0)
// 	{
// 		// Hide the trademark symbol
// 		D0.u16 = 0xa49c
// 		u16[0xffff775c] = D0.u16
// 		u16[0xffff775e] = D0.u16
// 		u16[0xffff7760] = D0.u16
// 		u16[0xffff77ac] = D0.u16
// 		u16[0xffff77ae] = D0.u16
// 		u16[0xffff77b0] = D0.u16
// 	}
// 	copyRectToVRAM(0xffff7400, 0xc000, 0x28, 0x1c)

// 	Enigma.decompress(0x0cc3aa, 0xffff7cc0, (TitleScreenSK.Background.targetInVRAM >> 5))

// 	A1 = 0xffff7cc0
// 	D0 = 0x60000003
// 	fn005d24()

// 	// Mappings for Sonic's landing animation
// 	Enigma.decompress(0x0cbb32, 0xffff8580, (sprite_attribute.PRIORITY | (TitleScreenSK.characters.targetInVRAM >> 5)))
// 	Enigma.decompress(0x0cbce0, 0xffff8e40, (sprite_attribute.PRIORITY | (TitleScreenSK.characters.targetInVRAM >> 5)))
// 	Enigma.decompress(0x0cbf3e, 0xffff9700, (sprite_attribute.PRIORITY | (TitleScreenSK.characters.targetInVRAM >> 5)))
// 	Enigma.decompress(0x0cc1c4, 0xffff9fc0, (sprite_attribute.PRIORITY | (TitleScreenSK.characters.targetInVRAM >> 5)))

// 	Kosinski.addToDecompressionQueue(0x0d4ba6, 0xffff4800)

// 	A1 = 0xfffffc80
// 	for (u8 i = 0; i < 4; ++i)
// 	{
// 		u16[A1] = 0
// 		fillMemory_u16(A1 + 2, 0x1e, 0x0eee)
// 		A1 += 0x20
// 	}
// 	copyMemory(0xfffffca0, 0x0055a8, 0x20)

// 	global.demo_countdown = (global.region_code & 0x40) ? 150 : 180

// 	VDP.Config.setActiveDisplay(true)

// 	Menu.FadeInAfterInit()
// 	playMusic(0xff)

// 	while (true)
// 	{
// 		while (true)
// 		{
// 		#if STANDALONE
// 			Renderer.resetSprites()
// 			Renderer.drawCustomSprite("original_game_by", getScreenWidth() / 2 - 85, 60, 0x00, 0, 0x2000, 0, min((180 - global.demo_countdown) * 8, 96))
// 		#endif

// 			global.frame_state = 0x14
// 			Kosinski.ProcessDecompressionQueue()
// 			waitForNextFrame()

// 			Kosinski.ProcessModules()
// 			if (kosinski.waiting_modules == 0)
// 				break
// 		}

// 		if ((control.pad1.pressed & CONTROL_START) || global.demo_countdown == 0)
// 			break
// 	}

// #if !STANDALONE
// 	playMusic(0xfe)
// #endif

// 	copyMemory(0xfffffc80, 0x005588, 0x80)

// 	Kosinski.addToDMAQueue(0x0cd910, TitleScreenSK.characters.targetInVRAM)

// 	palette_fade.range = 0x003f
// 	global.fade_timer = 0x16
// 	u32[0xffffb000] = 0x005628		// Sonic jumping down
// 	u32[0xffffb04a] = 0x005770		// The Death Egg
// 	u32[0xffffb094] = 0x005856		// Mountain top

// 	playMusic(MUSIC_TITLESCREEN)

// 	lives_counter = 3
// 	global.demo_countdown = (global.region_code & 0x40) ? 900 : 1080

// 	while (true)
// 	{
// 		global.frame_state = 0x1a
// 		Kosinski.ProcessDecompressionQueue()
// 		waitForNextFrame()

// 		if (global.fade_timer != 0)
// 		{
// 			--global.fade_timer
// 			FadeInFromWhite()
// 		}

// 		UpdateGameObjects()
// 		RenderSprites()
// 		fn005d94()
// 		Kosinski.ProcessModules()

// 		if ((control.pad1.pressed & CONTROL_START) == 0)
// 		{
// 			if (u32[0xffffb0de] != 0)
// 				break
// 		}
// 		else
// 		{
// 			if (global.fade_timer == 0)
// 			{
// 				A0 = 0xffffb128
// 				fn005972()

// 				u32[0xffffb04a] = 0x005802
// 				u16[0xffffb04a + 0x2e] = 0x0140
// 				u16[0xffffb04a + 0x32] = 0x70
// 				u16[0xffffeec0] = 0x03

// 				camera.screenshake.state = 0
// 				D0.u16 = 0x0100
// 				scrolloffset.y.planeB = D0.u16
// 				scrolloffset.y.planeB = D0.u16
// 				camera.position.y.u16 = D0.u16
// 				u16[0xffffee64] = D0.u16

// 				A0 = 0x005608
// 				A2 = 0xfffffc20
// 				for (u8 i = 0; i < 8; ++i)
// 				{
// 					u32[A2] = u32[A0]
// 					u32[A2 + 0x80] = u32[A0]
// 					A0 += 4
// 					A2 += 4
// 				}

// 				fn005d94()
// 				global.frame_state = 0x1a
// 				waitForNextFrame()

// 			#if !STANDALONE
// 				set_status_register(0x2700)
// 			#endif

// 				copyRectToVRAM(0xffff7cc0, 0xe000, 0x28, 0x1c)

// 				A0 = 0xffffb000
// 				fn00571e()
// 				break
// 			}
// 		}
// 	}

// 	while (true)
// 	{
// 		while (true)
// 		{
// 			global.frame_state = 0x1a
// 			Kosinski.ProcessDecompressionQueue()
// 			waitForNextFrame()

// 			if (global.fade_timer != 0)
// 			{
// 				--global.fade_timer
// 				FadeInFromWhite()
// 			}

// 			UpdateGameObjects()
// 			RenderSprites()
// 			fn005d94()
// 			Kosinski.ProcessModules()

// 			if (u32[0xffffb172] != 0)
// 				break
// 		}

// 		// if (global.demo_countdown == 0)
// 		// 	break

// 		if ((control.pad1.pressed & CONTROL_START) == 0)
// 			continue

// 		global.game_mode = 0x0c
// 		lives_counter = 3
// 		unused.lives_counter.player2 = 3
// 		ring_counter = 0
// 		timer.alldata = 0
// 		player.score = 0
// 		ring_counter.player2 = 0
// 		timer.alldata.player2 = 0
// 		player2.score = 0
// 		continues_counter = 0
// 		player.next_life_score = 5000
// 		unused.player2.next_life_score = 5000

// 		playSound(MUSIC_CTRL_FADEOUT)

// 	#if !STANDALONE
// 		// Is this even possible...?
// 		if (titlescreen.selection >= 0x02)
// 		{
// 			// Level Select
// 			global.game_mode = 0x28
// 			return
// 		}
// 	#endif

// 		levelselect.characters = titlescreen.selection * 2 + 1
// 		D0.u16 = 0x0700
// 		global.zone_act = D0.u16
// 		global.zone_act.apparent = D0.u16
// 		checkpoint.zone_act = D0.u16
// 		u16[0xfffffe16] = 0
// 		u16[0xffffffb0] = 0
// 		u32[0xffffffb2] = 0
// 		u16[0xffffffb6] = 0
// 		u8[0xffffffb8] = 0
// 		level.giantrings_clear = 0
// 		global.active_saveslot = 0

// 	#if STANDALONE
// 		// In S3AIR, always go to the main menu
// 		FadeOutScreenBlocking()
// 		Game.returnToMainMenu()
// 		Audio.fadeOutChannel(0, 0x40)	// Do the rest of music fade out relatively quickly
// 		yieldExecution()

// 	#else
// 		if (levelselect.unlocked && (control.pad1.state & CONTROL_A))
// 		{
// 			// Level Select
// 			global.game_mode = 0x28
// 		}
// 	#endif
// 		return
// 	}

// // 	// Start rolling demo
// // 	playSound(MUSIC_CTRL_FADEOUT)

// // #if !STANDALONE
// // 	global.demo_number = max(global.demo_number, 3)
// // #endif

// // 	u16[0xffffef7a] = global.demo_number
// // 	D0.u16 = (global.demo_number & 0x07) * 2
// // 	D0.u16 = u16[0x004344 + D0.u16]
// // 	global.zone_act = D0.u16
// // 	global.zone_act.apparent = D0.u16
// // 	checkpoint.zone_act = D0.u16

// // 	++global.demo_number
// // 	if (global.demo_number >= 7)
// // 	{
// // 	#if STANDALONE
// // 		global.demo_number = 0		// Play all demos
// // 	#else
// // 		global.demo_number = 3		// Skip first 3 demos
// // 	#endif
// // 	}

// // 	if (D0.s16 < 0)
// // 	{
// // 		global.game_mode = 0x34
// // 		global.next_bluespheres = 1
// // 		global.sk_bluespheres = 1
// // 		global.zone = 0x07
// // 		u16[0xffffffb0] = 0
// // 		u32[0xffffffb2] = 0
// // 		u16[0xffffffb6] = 0
// // 		u8[0xffffffb8] = 0
// // 	}
// // 	else
// // 	{
// // 		if (D0.u16 == 0x0700)
// // 		{
// // 			fn00552e()
// // 		}
// // 		global.game_mode = 0x08
// // 	}

// // 	global.rolling_demo = 1
// // 	lives_counter = 3
// // 	unused.lives_counter.player2 = 3
// // 	ring_counter = 0
// // 	timer.alldata = 0
// // 	player.score = 0
// // 	ring_counter.player2 = 0
// // 	timer.alldata.player2 = 0
// // 	player2.score = 0
// // 	player.next_life_score = 5000
// // 	unused.player2.next_life_score = 5000
// }

// //# address-hook(0x003e32) end(0x004342)
// function void TitleScreen()
// {
// 	playMusic(MUSIC_CTRL_FADEOUT)
// 	kosinski.queue_size = 0

// 	zeroMemory(0xffffff10, 0x6c)
// #if GAMEAPP
// 	// Setup region code according to settings
// 	global.region_code = Game.getSetting(SETTING_REGION_CODE)
// #endif

// 	ClearPatternLoadingQueue()
// 	global.zone_act = 0
// 	FadeOutScreenBlocking()

// #if STANDALONE
// 	u32 ptr = 0x003e32
// 	zeroMemory(ptr, 8)
// #else
// 	set_status_register(0x2700)
// #endif

// 	VDP.Config.enableHInt(false)
// 	VDP.Config.setNameTableBasePlaneA(0xc000)
// 	VDP.Config.setNameTableBasePlaneB(0xe000)
// 	VDP.Config.setPlayfieldSizeInPixels(512, 256)
// 	VDP.Config.setupWindowPlane(false, 0)			// Disable window plane
// 	VDP.Config.setVerticalScrolling(false, 0xff)	// Good old horizontal scrolling mode
// 	VDP.Config.setBackdropColor(0)
// 	VDP.Config.setRenderingModeConfiguration(false)

// 	water.fullscreen = 0
// 	level.water_present = 0

// 	fn0011ca()

// 	zeroMemory(0xffffac00, 0x400)
// 	zeroMemory(0xffffb000, 0x2000)
// 	zeroMemory(0xfffff700, 0x100)
// 	zeroMemory(0xffffee00, 0x100)

// #if STANDALONE
// 	Renderer.resetSprites()

// 	// Move planes a bit to the right
// 	for (u8 i = 0; i < getScreenHeight(); ++i)
// 		u32[0xffffe000 + i*4] = getScreenExtend() * 0x10001
// #endif

// 	fn01aa6e()

// 	zeroMemory(0xfffffc00, 0x100)

// 	checkpoint.number = 0
// 	global.stage_type = 0
// 	debug_mode.state = 0
// 	global.rolling_demo = 0
// 	u16[0xfffff634] = 0
// 	competition_mode.active = 0
// 	global.level_started = 0
// 	debug_mode.enabled.u8 = 0
// 	competition_mode.active = 0
// 	u16[0xffffffe4] = 0
// 	u16[0xffffffe6] = 0
// 	bluespheres.minigame_mode = 0
// 	global.demo_countdown = 359		// 6 seconds (minus one frame)
// 	u16[0xfffffb00] = 0
// 	u32[0xfffffbfc] = 0xfffffb00

// #if STANDALONE
// 	if (Game.getSetting(SETTING_TITLE_SCREEN))
// #else
// 	if (global.lock_on_state != 0)
// #endif
// 	{
// 		// Sonic & Knuckles title screen
// 		TitleScreen_SK()
// 		return
// 	}

// 	Kosinski.decompress(0x350d26, 0xffff0000)	// After this, A1 points to where uncompressed data ends
// 	updateSpritePattern(0xffff0000, TitleScreen.Intro_Background.targetInVRAM, A1.u16 >> 1)

// 	Enigma.decompress(0x34f6a0, 0xffff8000, (TitleScreen.Intro_Background.targetInVRAM >> 5))

// #if !STANDALONE
// 	if ((global.region_code & 0x80) == 0)
// #endif
// 	{
// 		// Hide the trademark symbol
// 		u32[0xffff83ac] = 0
// 	}

// 	copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)

// 	copyMemory(0xfffffc80, 0x00460c, 0x20)

// 	global.demo_countdown = 240		// 4 seconds
// 	VDP.Config.setActiveDisplay(true)
// 	Menu.FadeInAfterInit()

// #if STANDALONE
// 	// Stop any music that might be playing or restarting (this can happen after aborting a rolling demo)
// 	playMusic(MUSIC_CTRL_STOP)
// #endif
// 	playMusic(0xff)

// 	global.demo_countdown = 180		// 3 seconds
// 	while (global.demo_countdown != 0)
// 	{
// 		global.frame_state = 0x14
// 		waitForNextFrame()
// 	@EntryPoint_003fd2:

// 		if (control.pad1.pressed & CONTROL_START)
// 			break

// 	#if STANDALONE
// 		Renderer.resetSprites()
// 		Renderer.drawCustomSprite("original_game_by", getScreenWidth() / 2 - 85, 60, 0x00, 0, 0x2000, 0, 96)
// 	#endif
// 	}

// #if !STANDALONE
// 	playMusic(0xfe)
// #endif

// 	// While loop: SEGA logo background fade from white to black
// 	A1 = 0x00459c
// 	while (true)
// 	{
// 		global.frame_state = 0x02
// 		waitForNextFrame()

// 		copyMemory(0xfffffc00, A1, 0x0e)
// 		if (u16[A1] == 0)
// 			break

// 		A1 += 0x0e

// 	#if STANDALONE
// 		Renderer.resetSprites()
// 		if (u8[0xfffffc01] & 0x0e)
// 			Renderer.drawCustomSprite("original_game_by", getScreenWidth() / 2 - 85, 60, 0x00, 0, 0x2000, 0, u16(u8[0xfffffc01] & 0x0e) * 96 / 0x0e)
// 	#endif
// 	}

// 	outro.wait_time = 0
// 	u16[0xfffff662] = 0
// 	titleintro.buffer = 0xff
// 	titleintro.frames = 0
// 	titleintro.animstep = 1
// 	D0 = 1
// 	fn00440c()

// 	global.demo_countdown = (global.region_code & 0x40) ? 750 : 900
// #if STANDALONE
// 	// Slightly increase the wait time until demo starts
// 	global.demo_countdown += 20
// #endif

// 	Kosinski.addToDecompressionQueue(0x351c86, 0xffff0000)
// 	playMusic(MUSIC_TITLESCREEN)

// 	// While loop: Intro sequence with Sonic running towards the camera
// 	while (true)
// 	{
// 		global.frame_state = 0x04
// 		Kosinski.ProcessDecompressionQueue()

// 		waitForNextFrame()

// 	#if STANDALONE
// 		// Overwrite two frames with custom widescreen versions
// 		if (titleintro.animstep == 7)
// 		{
// 			Renderer.drawCustomSprite("intro_wideframe1", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
// 		}
// 		else if (titleintro.animstep == 8)
// 		{
// 			Renderer.drawCustomSprite("intro_wideframe2", getScreenExtend() - 40, 0, 0x00, 0, 0x5000)
// 		}

// 		if (control.pad1.pressed)
// 		{
// 			u8[ptr] = control.pad1.pressed
// 			++ptr
// 		}
// 	#endif

// 		fn0043d4()
// 		UpdateGameObjects()
// 		RenderSprites()
// 		LoadRequiredSpritePatterns()

// 		if (control.pad1.pressed & CONTROL_START)
// 			break

// 		if (titleintro.animstep >= 12)
// 			break
// 	}

// 	// White screen
// 	titleintro.animstep = 12
// 	fillMemory_u16(0xfffffc00, 0x80, 0x0eee)

// #if STANDALONE
// 	titleintro.frames = 15
// 	for (u8 k = 0; k < titleintro.frames; ++k)
// 	{
// 		global.frame_state = 0x04
// 		waitForNextFrame()
// 	}

// 	// This is to make sure screen stays white in the next frame even if skipping the intro
// 	VDP.Config.setActiveDisplay(false)
// #else
// 	titleintro.frames = 3
// 	global.frame_state = 0x04
// 	waitForNextFrame()
// #endif

// 	// Fill the planes with decompressed screen content
// 	Kosinski.decompress(0x359fc6, 0xffff0000)	// After this, A1 points to where uncompressed data ends
// 	updateSpritePattern(0xffff0000, TitleScreen.Intro_Background.targetInVRAM, A1.u16 >> 1)

// 	Enigma.decompress(0x350018, 0xffff8000, (sprite_attribute.PRIORITY | (TitleScreen.Intro_Background.targetInVRAM >> 5)))
// 	copyRectToVRAM(0xffff8000, 0xc000, 0x28, 0x1c)

// 	Enigma.decompress(0x350112, 0xffff8000, (sprite_attribute.PALETTE.LINE2 | (TitleScreen.Intro_Background.targetInVRAM >> 5)))
// 	copyRectToVRAM(0xffff8000, 0xe000, 0x28, 0x1c)

// 	global.frame_state = 0x04
// 	waitForNextFrame()

// #if STANDALONE
// 	VDP.Config.setActiveDisplay(true)
// #endif

// 	copyMemory(0xfffffc80, 0x0047ac, 0x80)

// 	// Load patterns used in title screen
// 	{
// 		// Large banner
// 		Nemesis.loadDataToVRAM(0x35026c, TitleScreen.Banner.targetInVRAM)

// 		// Menu options, copyright info
// 		Nemesis.loadDataToVRAM(0x004d2a, TitleScreen.Menu.targetInVRAM)

// 		// Wiggling finger, winking eye, twinkle, Tails & Tornado in BG
// 		Nemesis.loadDataToVRAM(0x2c49cc, TitleScreen.Characters.targetInVRAM)

// 		// "& Knuckles"
// 		Nemesis.loadDataToVRAM(0x0d6498, TitleScreen.AndKnucklesTitle.targetInVRAM)
// 	}

// 	u32[0xffffb000] = 0x00482c		// Banner ("Sonic 3 - Sonic The Hedgehog")
// 	u32[0xffffb04a] = 0x004a5c		// Menu items
// 	u32[0xffffb0de] = 0x004a1e		// Copyright info
// 	u32[0xffffb128] = 0x004ae4		// Sonic's hand wagging
// 	u32[0xffffb172] = 0x004b54		// Sonic's eye blinking
// 	u32[0xffffb1bc] = 0x004bb2		// Tails in the Tornado
// 	u32[0xffffb206] = 0x00496a		// "& Knuckles" logo append
// 	titleintro.frames = 0

// 	#if STANDALONE
// 		global.whiteflash_timeout = 25
// 		airHighlightAnimationTimer = 0

// 		// This is needed for the background to be shown in first frame at all (when VDP sprite rendering seems to be disabled)
// 		Renderer.resetSprites()
// 		Renderer.drawCustomSprite("bg_title_screen", getScreenExtend() - 40, 0, 0x00, 0, 0x1100)
// 	#endif

// 	while (true)
// 	{
// 		global.frame_state = 0x04
// 		waitForNextFrame()
// 	@EntryPoint:

// 		UpdateGameObjects()
// 		RenderSprites()
// 		LoadRequiredSpritePatterns()

// 	#if STANDALONE
// 		// Allow the player to press Start before the logo animation is finished already; only wait for the short white flash to finish
// 		if (global.whiteflash_timeout > 0)
// 			continue
// 	#else
// 		if (u32[0xffffb094] == 0)
// 			continue
// 	#endif

// 		// if (global.demo_countdown == 0)
// 		// 	break

// 		if ((control.pad1.pressed | control.pad2.pressed) & CONTROL_START)
// 		{
// 			global.game_mode = 0x0c
// 			lives_counter = 3
// 			unused.lives_counter.player2 = 3
// 			ring_counter = 0
// 			timer.alldata = 0
// 			player.score = 0
// 			ring_counter.player2 = 0
// 			timer.alldata.player2 = 0
// 			player2.score = 0
// 			continues_counter = 0
// 			player.next_life_score = 5000
// 			unused.player2.next_life_score = 5000

// 			playSound(MUSIC_CTRL_FADEOUT)

// 		#if GAMEAPP
// 			// In S3AIR, there is no choice, always go to the main menu
// 			FadeOutScreenBlocking()
// 			Game.returnToMainMenu()
// 			Audio.fadeOutChannel(0, 0x40)	// Do the rest of music fade out relatively quickly
// 			yieldExecution()

// 		#else
// 			D0 = titlescreen.selection
// 			if (D0.u8 == 0)
// 			{
// 				// Data Select
// 				global.game_mode = 0x4c
// 			}
// 			else if (D0.u8 == 1)
// 			{
// 				// Competition Mode
// 				global.game_mode = 0x38
// 			}
// 			else
// 			{
// 				// Level Select
// 				global.game_mode = 0x28
// 			}
// 		#endif
// 			return
// 		}
// 	}

// 	// Start rolling demo
// 	playSound(MUSIC_CTRL_FADEOUT)

// 	u16[0xffffef7a] = global.demo_number
// 	D0.u16 = (global.demo_number & 0x07) * 2
// 	D0.u16 = u16[0x004344 + D0.u16]
// 	global.zone_act = D0.u16
// 	global.zone_act.apparent = D0.u16
// 	checkpoint.zone_act = D0.u16

// 	++global.demo_number
// 	if (global.lock_on_state == 0)
// 	{
// 		if (global.demo_number == 3)		// Skip Knuckles in MHZ demo
// 		{
// 			global.demo_number = 4
// 		}
// 		else if (global.demo_number >= 7)	// We've got 7 demos in total
// 		{
// 			global.demo_number = 0
// 		}
// 	}
// 	else
// 	{
// 		if (global.demo_number >= 3)		// Restrict to first four demos
// 		{
// 			global.demo_number = 0
// 		}
// 	}

// 	if (D0.s16 < 0)
// 	{
// 		// Blue Spheres rolling demo
// 		global.game_mode = 0x34
// 		global.next_bluespheres = 1
// 		global.sk_bluespheres = 1
// 		global.zone = 0x07
// 		u16[0xffffffb0] = 0
// 		u32[0xffffffb2] = 0
// 		u16[0xffffffb6] = 0
// 		u8[0xffffffb8] = 0
// 		u8[0xffffffb3] = 0x02
// 	}
// 	else
// 	{
// 		// Normal Game rolling demo
// 		global.game_mode = 0x08
// 	}

// 	global.rolling_demo = 1
// 	lives_counter = 3
// 	unused.lives_counter.player2 = 3
// 	ring_counter = 0
// 	timer.alldata = 0
// 	player.score = 0
// 	ring_counter.player2 = 0
// 	timer.alldata.player2 = 0
// 	player2.score = 0
// 	player.next_life_score = 5000
// 	unused.player2.next_life_score = 5000
// }

// //# address-hook(0x07bd4c) end(0x07bd70)
// function void fn07bd4c()
// {
// 	// Targets:
// 	//  - 0x07bdbe	-> objA0.base_state = 0x00
// 	//  - 0x07bdbe	-> objA0.base_state = 0x02
// 	//  - 0x07be0e	-> objA0.base_state = 0x04
// 	//  - 0x07be42	-> objA0.base_state = 0x06
// 	//  - 0x07be9c	-> objA0.base_state = 0x08
// 	//  - 0x07bf28	-> objA0.base_state = 0x0a
// 	//  - 0x07bf5a	-> objA0.base_state = 0x0c
// 	//  - 0x07bfa0	-> objA0.base_state = 0x0e
// 	//  - 0x07c062	-> objA0.base_state = 0x10
// 	//  - 0x07c11c	-> objA0.base_state = 0x12
// 	//  - 0x07c144	-> objA0.base_state = 0x14
// 	//  - 0x07c11c	-> objA0.base_state = 0x16
// 	//  - 0x07c18c	-> objA0.base_state = 0x18
// 	//  - 0x07c1d8	-> objA0.base_state = 0x1a
// 	//  - 0x07c1f2	-> objA0.base_state = 0x1c
// 	//  - 0x07c144	-> objA0.base_state = 0x1e
// 	//  - 0x07c250	-> objA0.base_state = 0x20
// 	//  - 0x07c2a4	-> objA0.base_state = 0x22
// 	//  - 0x07c2dc	-> objA0.base_state = 0x24
// 	//  - 0x07c302	-> objA0.base_state = 0x26
// 	//  - 0x07c328	-> objA0.base_state = 0x28
// 	//  - 0x07c37a	-> objA0.base_state = 0x2a
// 	//  - 0x07c37a	-> objA0.base_state = 0x2c
// 	//  - 0x07c3f8	-> objA0.base_state = 0x2e
// 	//  - 0x07c430	-> objA0.base_state = 0x30
// 	//  - 0x07c458	-> objA0.base_state = 0x32
// 	//  - 0x07c49e	-> objA0.base_state = 0x34
// 	//  - 0x07c4e0	-> objA0.base_state = 0x36
// 	//  - 0x07c51c	-> objA0.base_state = 0x38
// 	//  - 0x07c55e	-> objA0.base_state = 0x3a
// 	//  - 0x07c59a	-> objA0.base_state = 0x3c
// 	//  - 0x07c630	-> objA0.base_state = 0x3e
// 	//  - 0x07c64e	-> objA0.base_state = 0x40
// 	//  - 0x07c65c	-> objA0.base_state = 0x42
// 	//  - 0x07c684	-> objA0.base_state = 0x44
// 	//  - 0x07c6f0	-> objA0.base_state = 0x46
// 	call tableLookupAddress(0x07bd76, objA0.base_state)
// 	System.writeDisplayLine(stringformat("objA0.base_state = %x", objA0.base_state))
// 	A4 = 0x07d39e
// 	fn07d312()
// 	fn07d2d8()

// 	Object.loadSpritePatterns(0x07d4d6)

// 	Enemy.DrawDynamicObject()
// }


// //# address-hook(0x084898) end(0x0848b4)
// function void Object.TriggerOnGroundHit()
// {
// 	if (objA0.velocity.y >= 0)
// 	{
// 		CheckGroundCollision()
// 		System.writeDisplayLine(stringformat("D1.s16 = %d", D1.s16))
// 		if (D1.s16 <= 0)
// 		{
// 			objA0.position.y.u16 += D1.s16
// 			A1 = objA0.countdown_callback
// 			call A1
// 		}
// 	}
// }